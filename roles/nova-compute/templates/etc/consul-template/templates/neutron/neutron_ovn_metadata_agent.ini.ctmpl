# {{ ansible_managed }}
# Consul Template Managed - Neutron

[DEFAULT]

#
# From neutron.ovn.metadata.agent
#

# Location for Metadata Proxy UNIX domain socket. (string value)
#metadata_proxy_socket = $state_path/metadata_proxy

# User (uid or name) running metadata proxy after its initialization (if empty:
# agent effective user). (string value)
#metadata_proxy_user =

# Group (gid or name) running metadata proxy after its initialization (if
# empty: agent effective group). (string value)
#metadata_proxy_group =

# Certificate Authority public key (CA cert) file for ssl (string value)
#auth_ca_cert = <None>

# IP address or DNS name of Nova metadata server. (host address value)
nova_metadata_host = openstack-nova-controller-metadata.haproxy.us-homelab1.hl.rmb938.me

# TCP Port used by Nova metadata server. (port value)
# Minimum value: 0
# Maximum value: 65535
nova_metadata_port = 443

# When proxying metadata requests, Neutron signs the Instance-ID header with a
# shared secret to prevent spoofing. You may select any string for a secret,
# but it must match here and in the configuration used by the Nova metadata
# server. NOTE: Nova uses the same config key, but in [neutron] section.
# (string value)
# TODO: generate this secret and update it periodically
metadata_proxy_shared_secret = this-is-my-not-super-secret-secret

# Protocol to access Nova metadata, http or https (string value)
# Possible values:
# http - <No description provided>
# https - <No description provided>
nova_metadata_protocol = https

# Allow to perform insecure SSL (https) requests to Nova metadata (boolean
# value)
#nova_metadata_insecure = false

# Client certificate for Nova metadata api server. (string value)
#nova_client_cert =

# Private key of client certificate. (string value)
#nova_client_priv_key =

# Metadata Proxy UNIX domain socket mode, 4 values allowed: 'deduce': deduce
# mode from metadata_proxy_user/group values, 'user': set metadata proxy socket
# mode to 0o644, to use when metadata_proxy_user is agent effective user or
# root, 'group': set metadata proxy socket mode to 0o664, to use when
# metadata_proxy_group is agent effective group or root, 'all': set metadata
# proxy socket mode to 0o666, to use otherwise. (string value)
# Possible values:
# deduce - <No description provided>
# user - <No description provided>
# group - <No description provided>
# all - <No description provided>
#metadata_proxy_socket_mode = deduce

# Number of separate worker processes for metadata server (defaults to 0 when
# used with ML2/OVN and half of the number of CPUs with other backend drivers)
# (integer value)
#
# This option has a sample default set, which means that
# its actual default value may vary from the one documented
# below.
#metadata_workers = <num_of_cpus> / 2

# Number of backlog requests to configure the metadata server socket with
# (integer value)
#metadata_backlog = 4096

#
# From oslo.log
#

# If set to true, the logging level will be set to DEBUG instead of the default
# INFO level. (boolean value)
# Note: This option can be changed without restarting.
#debug = false

# The name of a logging configuration file. This file is appended to any
# existing logging configuration files. For details about logging configuration
# files, see the Python logging module documentation. Note that when logging
# configuration files are used then all logging configuration is set in the
# configuration file and other logging configuration options are ignored (for
# example, log-date-format). (string value)
# Note: This option can be changed without restarting.
# Deprecated group/name - [DEFAULT]/log_config
#log_config_append = <None>

# Defines the format string for %%(asctime)s in log records. Default:
# %(default)s . This option is ignored if log_config_append is set. (string
# value)
#log_date_format = %Y-%m-%d %H:%M:%S

# (Optional) Name of log file to send logging output to. If no default is set,
# logging will go to stderr as defined by use_stderr. This option is ignored if
# log_config_append is set. (string value)
# Deprecated group/name - [DEFAULT]/logfile
#log_file = <None>

# (Optional) The base directory used for relative log_file  paths. This option
# is ignored if log_config_append is set. (string value)
# Deprecated group/name - [DEFAULT]/logdir
#log_dir = <None>

# DEPRECATED: Uses logging handler designed to watch file system. When log file
# is moved or removed this handler will open a new log file with specified path
# instantaneously. It makes sense only if log_file option is specified and
# Linux platform is used. This option is ignored if log_config_append is set.
# (boolean value)
# This option is deprecated for removal.
# Its value may be silently ignored in the future.
# Reason: This function is known to have bene broken for long time, and depends
# on the unmaintained library
#watch_log_file = false

# Use syslog for logging. Existing syslog format is DEPRECATED and will be
# changed later to honor RFC5424. This option is ignored if log_config_append
# is set. (boolean value)
#use_syslog = false

# Enable journald for logging. If running in a systemd environment you may wish
# to enable journal support. Doing so will use the journal native protocol
# which includes structured metadata in addition to log messages.This option is
# ignored if log_config_append is set. (boolean value)
#use_journal = false

# Syslog facility to receive log lines. This option is ignored if
# log_config_append is set. (string value)
#syslog_log_facility = LOG_USER

# Use JSON formatting for logging. This option is ignored if log_config_append
# is set. (boolean value)
#use_json = false

# Log output to standard error. This option is ignored if log_config_append is
# set. (boolean value)
#use_stderr = false

# DEPRECATED: Log output to Windows Event Log. (boolean value)
# This option is deprecated for removal.
# Its value may be silently ignored in the future.
# Reason: Windows support is no longer maintained.
#use_eventlog = false

# (Optional) Set the 'color' key according to log levels. This option takes
# effect only when logging to stderr or stdout is used. This option is ignored
# if log_config_append is set. (boolean value)
#log_color = false

# The amount of time before the log files are rotated. This option is ignored
# unless log_rotation_type is set to "interval". (integer value)
#log_rotate_interval = 1

# Rotation interval type. The time of the last file change (or the time when
# the service was started) is used when scheduling the next rotation. (string
# value)
# Possible values:
# Seconds - <No description provided>
# Minutes - <No description provided>
# Hours - <No description provided>
# Days - <No description provided>
# Weekday - <No description provided>
# Midnight - <No description provided>
#log_rotate_interval_type = days

# Maximum number of rotated log files. (integer value)
#max_logfile_count = 30

# Log file maximum size in MB. This option is ignored if "log_rotation_type" is
# not set to "size". (integer value)
#max_logfile_size_mb = 200

# Log rotation type. (string value)
# Possible values:
# interval - Rotate logs at predefined time intervals.
# size - Rotate logs once they reach a predefined size.
# none - Do not rotate log files.
#log_rotation_type = none

# Format string to use for log messages with context. Used by
# oslo_log.formatters.ContextFormatter (string value)
#logging_context_format_string = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(global_request_id)s %(request_id)s %(user_identity)s] %(instance)s%(message)s

# Format string to use for log messages when context is undefined. Used by
# oslo_log.formatters.ContextFormatter (string value)
#logging_default_format_string = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [-] %(instance)s%(message)s

# Additional data to append to log message when logging level for the message
# is DEBUG. Used by oslo_log.formatters.ContextFormatter (string value)
#logging_debug_format_suffix = %(funcName)s %(pathname)s:%(lineno)d

# Prefix each line of exception output with this format. Used by
# oslo_log.formatters.ContextFormatter (string value)
#logging_exception_prefix = %(asctime)s.%(msecs)03d %(process)d ERROR %(name)s %(instance)s

# Defines the format string for %(user_identity)s that is used in
# logging_context_format_string. Used by oslo_log.formatters.ContextFormatter
# (string value)
#logging_user_identity_format = %(user)s %(project)s %(domain)s %(system_scope)s %(user_domain)s %(project_domain)s

# List of package logging levels in logger=LEVEL pairs. This option is ignored
# if log_config_append is set. (list value)
#default_log_levels = amqp=WARN,amqplib=WARN,boto=WARN,qpid=WARN,sqlalchemy=WARN,suds=INFO,oslo.messaging=INFO,oslo_messaging=INFO,iso8601=WARN,requests.packages.urllib3.connectionpool=WARN,urllib3.connectionpool=WARN,websocket=WARN,requests.packages.urllib3.util.retry=WARN,urllib3.util.retry=WARN,keystonemiddleware=WARN,routes.middleware=WARN,stevedore=WARN,taskflow=WARN,keystoneauth=WARN,oslo.cache=INFO,oslo_policy=INFO,dogpile.core.dogpile=INFO

# Enables or disables publication of error events. (boolean value)
#publish_errors = false

# The format for an instance that is passed with the log message. (string
# value)
#instance_format = "[instance: %(uuid)s] "

# The format for an instance UUID that is passed with the log message. (string
# value)
#instance_uuid_format = "[instance: %(uuid)s] "

# Interval, number of seconds, of log rate limiting. (integer value)
#rate_limit_interval = 0

# Maximum number of logged messages per rate_limit_interval. (integer value)
#rate_limit_burst = 0

# Log level name used by rate limiting. Logs with level greater or equal to
# rate_limit_except_level are not filtered. An empty string means that all
# levels are filtered. (string value)
# Possible values:
# CRITICAL - <No description provided>
# ERROR - <No description provided>
# INFO - <No description provided>
# WARNING - <No description provided>
# DEBUG - <No description provided>
# '' - <No description provided>
#rate_limit_except_level = CRITICAL

# Enables or disables fatal status of deprecations. (boolean value)
#fatal_deprecations = false


[metadata_rate_limiting]

#
# From neutron.ovn.metadata.agent
#

# Enable rate limiting on the metadata API. (boolean value)
#rate_limit_enabled = false

# Comma separated list of the metadata address IP versions (4, 6) for which
# rate limiting will be enabled. The default is to rate limit only for the
# metadata IPv4 address. NOTE: at the moment, the open source version of
# HAProxy only allows us to rate limit for IPv4 or IPv6, but not both at the
# same time. (list value)
#ip_versions = 4

# Duration (seconds) of the base window on the metadata API. (integer value)
#base_window_duration = 10

# Max number of queries to accept during the base window. (integer value)
#base_query_rate_limit = 10

# Duration (seconds) of the burst window on the metadata API. (integer value)
#burst_window_duration = 10

# Max number of queries to accept during the burst window. (integer value)
#burst_query_rate_limit = 10

[ovn]

{% raw %}
ovn_nb_connection = {{range $index, $service := service "openstack-ovn-northd-nb-ovsdb|any"}}{{if ne $index 0}},{{end}}ssl:{{ .Address }}:6641{{end}}
{% endraw %}

# The PEM file with private key for SSL connection to OVN-NB-DB (string value)
ovn_nb_private_key = /etc/neutron/ovn-nb-ovsdb-user-neutron.key

# The PEM file with certificate that certifies the private key specified in
# ovn_nb_private_key (string value)
ovn_nb_certificate = /etc/neutron/ovn-nb-ovsdb-user-neutron.crt

# The PEM file with CA certificate that OVN should use to verify certificates
# presented to it by SSL peers (string value)
ovn_nb_ca_cert = /etc/neutron/ovn-nb-ovsdb-ca.crt

{% raw %}
ovn_sb_connection = {{range $index, $service := service "openstack-ovn-northd-sb-ovsdb|any"}}{{if ne $index 0}},{{end}}ssl:{{ .Address }}:6642{{end}}
{% endraw %}

# The PEM file with private key for SSL connection to OVN-SB-DB (string value)
ovn_sb_private_key = /etc/neutron/ovn-sb-ovsdb-user-neutron.key

# The PEM file with certificate that certifies the private key specified in
# ovn_sb_private_key (string value)
ovn_sb_certificate = /etc/neutron/ovn-sb-ovsdb-user-neutron.crt

# The PEM file with CA certificate that OVN should use to verify certificates
# presented to it by SSL peers (string value)
ovn_sb_ca_cert = /etc/neutron/ovn-sb-ovsdb-ca.crt

[ovs]
ovsdb_connection = unix:/var/run/openvswitch/db.sock

#
# From neutron.ovn.metadata.agent
#

# The connection string for the native OVSDB backend. Use tcp:IP:PORT for TCP
# connections. Use unix:FILE for unix domain socket connections. (string value)
#ovsdb_connection = unix:/usr/local/var/run/openvswitch/db.sock

# Timeout in seconds for the OVSDB connection transaction (integer value)
#ovsdb_connection_timeout = 180